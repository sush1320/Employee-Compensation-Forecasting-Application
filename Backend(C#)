// Project Structure
// - Models/
// - Data/
// - Repositories/
// - Services/
// - Controllers/

// Models/Employee.cs
public class Employee
{
    public int EmployeeID { get; set; }
    public string Name { get; set; }
    public int RoleID { get; set; }
    public int LocationID { get; set; }
    public decimal ExperienceYears { get; set; }
    public decimal Compensation { get; set; }
    public string Status { get; set; }
    public Role Role { get; set; }
    public Location Location { get; set; }
}

// Models/Role.cs
public class Role
{
    public int RoleID { get; set; }
    public string RoleName { get; set; }
}

// Models/Location.cs
public class Location
{
    public int LocationID { get; set; }
    public string LocationName { get; set; }
}

// Data/ApplicationDbContext.cs
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

    public DbSet<Employee> Employees { get; set; }
    public DbSet<Role> Roles { get; set; }
    public DbSet<Location> Locations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<Employee>()
            .HasOne(e => e.Role)
            .WithMany()
            .HasForeignKey(e => e.RoleID);

        modelBuilder.Entity<Employee>()
            .HasOne(e => e.Location)
            .WithMany()
            .HasForeignKey(e => e.LocationID);
    }
}

// Repositories/IEmployeeRepository.cs
public interface IEmployeeRepository
{
    Task<IEnumerable<Employee>> FilterEmployeesAsync(int? roleId, int? locationId, bool includeInactive);
    Task<decimal> GetAverageCompensationByLocationAsync(int locationId);
    Task<IEnumerable<object>> GetCompensationComparisonAcrossLocationsAsync();
    Task<IEnumerable<object>> GroupEmployeesByExperienceAsync(string groupBy);
    Task ApplyGlobalIncrementAsync(decimal incrementPercent);
    Task ApplyCustomIncrementAsync(int employeeId, decimal incrementPercent);
    Task ApplyLocationIncrementAsync(int locationId, decimal incrementPercent);
}

// Services/EmployeeService.cs
public class EmployeeService : IEmployeeRepository
{
    private readonly ApplicationDbContext _context;

    public EmployeeService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<Employee>> FilterEmployeesAsync(int? roleId, int? locationId, bool includeInactive)
    {
        return await _context.Employees
            .Include(e => e.Role)
            .Include(e => e.Location)
            .Where(e => (!roleId.HasValue || e.RoleID == roleId)
                     && (!locationId.HasValue || e.LocationID == locationId)
                     && (includeInactive || e.Status == "Active"))
            .ToListAsync();
    }

    public async Task<decimal> GetAverageCompensationByLocationAsync(int locationId)
    {
        return await _context.Employees
            .Where(e => e.LocationID == locationId)
            .AverageAsync(e => e.Compensation);
    }

    public async Task<IEnumerable<object>> GetCompensationComparisonAcrossLocationsAsync()
    {
        return await _context.Employees
            .GroupBy(e => e.Location.LocationName)
            .Select(g => new {
                Location = g.Key,
                AverageCompensation = g.Average(e => e.Compensation)
            })
            .ToListAsync<object>();
    }

    public async Task<IEnumerable<object>> GroupEmployeesByExperienceAsync(string groupBy)
    {
        var query = _context.Employees.Include(e => e.Role).Include(e => e.Location);

        return await query.GroupBy(e => new {
            Range = e.ExperienceYears <= 1 ? "0-1" :
                    e.ExperienceYears <= 2 ? "1-2" :
                    e.ExperienceYears <= 5 ? "2-5" :
                    e.ExperienceYears <= 10 ? "5-10" : "10+",
            GroupVal = groupBy == "Location" ? e.Location.LocationName : groupBy == "Role" ? e.Role.RoleName : null
        })
        .Select(g => new {
            ExperienceRange = g.Key.Range,
            Group = g.Key.GroupVal,
            Count = g.Count()
        })
        .ToListAsync<object>();
    }

    public async Task ApplyGlobalIncrementAsync(decimal incrementPercent)
    {
        var employees = await _context.Employees.Where(e => e.Status == "Active").ToListAsync();
        employees.ForEach(e => e.Compensation += e.Compensation * incrementPercent / 100);
        await _context.SaveChangesAsync();
    }

    public async Task ApplyCustomIncrementAsync(int employeeId, decimal incrementPercent)
    {
        var employee = await _context.Employees.FindAsync(employeeId);
        if (employee != null)
        {
            employee.Compensation += employee.Compensation * incrementPercent / 100;
            await _context.SaveChangesAsync();
        }
    }

    public async Task ApplyLocationIncrementAsync(int locationId, decimal incrementPercent)
    {
        var employees = await _context.Employees
            .Where(e => e.LocationID == locationId && e.Status == "Active")
            .ToListAsync();

        employees.ForEach(e => e.Compensation += e.Compensation * incrementPercent / 100);
        await _context.SaveChangesAsync();
    }
}

// Controllers/EmployeeController.cs
[ApiController]
[Route("api/[controller]")]
public class EmployeeController : ControllerBase
{
    private readonly IEmployeeRepository _repo;

    public EmployeeController(IEmployeeRepository repo)
    {
        _repo = repo;
    }

    [HttpGet("filter")]
    public async Task<IActionResult> Filter(int? roleId, int? locationId, bool includeInactive = false)
        => Ok(await _repo.FilterEmployeesAsync(roleId, locationId, includeInactive));

    [HttpGet("average/location/{locationId}")]
    public async Task<IActionResult> AverageCompensation(int locationId)
        => Ok(await _repo.GetAverageCompensationByLocationAsync(locationId));

    [HttpGet("compare/locations")]
    public async Task<IActionResult> CompareLocations()
        => Ok(await _repo.GetCompensationComparisonAcrossLocationsAsync());

    [HttpGet("grouped")]
    public async Task<IActionResult> GroupedByExperience(string groupBy)
        => Ok(await _repo.GroupEmployeesByExperienceAsync(groupBy));

    [HttpPost("increment/global")]
    public async Task<IActionResult> ApplyGlobalIncrement(decimal percent)
    {
        await _repo.ApplyGlobalIncrementAsync(percent);
        return Ok("Global increment applied.");
    }

    [HttpPost("increment/custom")]
    public async Task<IActionResult> ApplyCustomIncrement(int employeeId, decimal percent)
    {
        await _repo.ApplyCustomIncrementAsync(employeeId, percent);
        return Ok("Custom increment applied.");
    }

    [HttpPost("increment/location")]
    public async Task<IActionResult> ApplyLocationIncrement(int locationId, decimal percent)
    {
        await _repo.ApplyLocationIncrementAsync(locationId, percent);
        return Ok("Location increment applied.");
    }
}
